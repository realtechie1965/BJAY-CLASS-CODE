def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]
pipeline {
	agent any
	tools {
	    maven "maven4"
	    jdk "myjdk"
	}

	stages {
	    stage('Fetch code') {
            steps {
               git branch: 'master', url: 'https://github.com/tech-house31/sampleapplication.git'
            }

	    }

	    stage('compile'){
	        steps{
	           sh 'mvn compile'
	        }

	    }

	    stage('unit-test') {
            steps{
                sh 'mvn test'
            }
        }

        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        
        stage('code-review') {
            steps{
                sh 'mvn -P metrics pmd:pmd'
            }
        }
        
        stage('code-coverage') {
            steps{
                sh 'mvn verify'
            }
        }
        
         stage('Checkstyle Analysis'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }
        
        stage('build-artifacts') {
            steps{
                sh 'mvn install -DskipTests'
            }
            
            post {
	           success {
	              echo 'Now Archiving it...'
	              archiveArtifacts artifacts: '**/target/*.war'
	           }
	        }
        }

	stage('Version-Artifacts){
		steps{
		    sh 'mkdir -p version'
		    sh 'cp target/sampleapp.war version/sampleapp-$BUILD_ID.war'
		}
	}
        
        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar4.8'
            }
            steps {
               withSonarQubeEnv('sonar') {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=sampleapp \
                   -Dsonar.projectName=sampleapp \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/devopsdemo/utilities/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }
        
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage("UploadArtifact"){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: '172.31.87.160:8081',
                  groupId: 'Dev',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: 'sampleapp-repo',
                  credentialsId: 'Nexuslogin',
                  artifacts: [
                    [artifactId: 'sampleapp',
                     classifier: '',
                     file: 'target/sampleapp.war',
                     type: 'war']
                  ]
                )
            }
        }
	}
	
	post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#jenkinscicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
